{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","event","_createStores","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,YAAMA,SAAS,CAAC,cAAD,CAAf;AACA,UAAIC,aAAa,IAAjB;AACA,UAAIC,QAAQ,IAAZ;;AAEO,YAAMC,iBAAN,CAAwB;AAC7BC,sBAAc;AACZ,gBAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,eAAOC,aAAP,GAAuB;AACrB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,gBAAGR,UAAH,EAAe;AACb,qBAAOO,QAAQP,UAAR,CAAP;AACD;;AAED,kBAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wBAAYG,eAAZ,GAA8BC,SAAS;AACrCX,gCAAkBY,aAAlB,CAAgCD,MAAME,MAAN,CAAaC,MAA7C;AACD,aAFD;;AAIAP,wBAAYQ,SAAZ,GAAwBJ,SAAS;AAC/Bb,2BAAaa,MAAME,MAAN,CAAaC,MAA1B;AACAf,sBAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,yBAAWC,KAAX,GAAmB,MAAM;AACvB,sBAAM,IAAIG,KAAJ,CAAU,8FAAV,CAAN;AACD,eAFD;;AAIAG,sBAAQM,MAAME,MAAN,CAAaC,MAArB;AACD,aATD;;AAWAP,wBAAYU,OAAZ,GAAsBN,SAAS;AAC7BL,qBAAOK,MAAME,MAAN,CAAaK,KAAb,CAAmBC,IAA1B;AACD,aAFD;AAGD,WAzBM,CAAP;AA0BD;;AAED,eAAOP,aAAP,CAAqBd,UAArB,EAAiC;AAC/BD,iBAAOuB,OAAP,CAAgBC,KAAD,IAAW;AACxB,gBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgD;AAC9CvB,yBAAW0B,iBAAX,CAA6BH,KAA7B;AACD;;AAEDvB,uBAAW2B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAClCK,6BAAe;AADmB,aAApC;AAGD,WARD;AASD;;AAEDC,0BAAkB;AAChB,cAAG7B,UAAH,EAAe;AACbC;AACD;AACF;AAlD4B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negotiations'];\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n  constructor() {\r\n    throw new Error('This class should not be instantiated.');\r\n  }\r\n\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      if(connection) {\r\n        return resolve(connection);\r\n      }\r\n      \r\n      const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n      openRequest.onupgradeneeded = event => {\r\n        ConnectionFactory._createStores(event.target.result);\r\n      }\r\n  \r\n      openRequest.onsuccess = event => {\r\n        connection = event.target.result;\r\n        close = connection.close.bind(connection);\r\n\r\n        connection.close = () => {\r\n          throw new Error('A connection should not be closed directly. Use ConnectionFactory.closeConnection() instead.');\r\n        }\r\n\r\n        resolve(event.target.result);\r\n      }\r\n  \r\n      openRequest.onerror = event => {\r\n        reject(event.target.error.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  static _createStores(connection) {\r\n    stores.forEach((store) => {\r\n      if(connection.objectStoreNames.contains(store)) {\r\n        connection.deleteObjectStore(store);\r\n      }\r\n\r\n      connection.createObjectStore(store, {\r\n        autoIncrement: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  closeConnection() {\r\n    if(connection) {\r\n      close();\r\n    }\r\n  }\r\n}"]}